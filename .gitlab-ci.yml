# Use amazoncorretto:21-alpine-jdk as the base Docker image for all jobs in this pipeline
image: amazoncorretto:21-alpine-jdk

# 'before_script' steps are executed before each job's script
before_script:
  # Define the GRADLE_USER_HOME environment variable
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  # Export the GRADLE_USER_HOME environment variable for use in all subsequent commands
  - export GRADLE_USER_HOME


# Define the stages that make up the build process
stages:
  - arduino-build # The 'arduino-build' stage builds the Arduino code
  - build         # The 'build' stage compiles the application
  - test          # The 'test' stage runs the application's tests

# Define the 'arduino-build' job
# arduino-build:
#   image: ubuntu:latest
#   stage: arduino-build
#   tags:
#     - docker
#   script:
#     # Install arduino-cli
#     - apt-get update
#     - apt-get install curl -y
#     - curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
#     - export PATH=$PATH:/builds/courses/dit113/2024/group-12/quiet-quest/bin
#     - arduino-cli version
#     # Install dependencies (setup) and build the project
#     - cd wio/quietquest
#     - ./setup.sh
#     - arduino-cli compile --fqbn Seeeduino:samd:seeed_wio_terminal

# Define the Gradle build job
build:
  stage: build
  tags:
    - docker    # Ensure this job runs on runners with the 'docker' tag
  script:
    - cd app/quietquest                     # Change directory to the 'app/quietquest' directory inside the project
    - ./gradlew --build-cache assemble      # Execute the Gradle assemble command with caching to compile the project
  # Cache configuration for the test job
  cache:
    key: "$CI_COMMIT_REF_NAME"  # Cache key unique to the branch or tag
    policy: push               # Push the cache after successful job completion
    paths:
      - build                  # Cache the build output directory
      - .gradle                # Cache the Gradle data directory

# Define the 'test' job
test:
  stage: test
  tags:
    - docker
  script:
     - cd app/quietquest   # Change directory to the 'app/quietquest' directory inside the project
     - ./gradlew check    # Execute the Gradle check command to run unit tests
  # Configuration for using cached data in testing
  cache:
    key: "$CI_COMMIT_REF_NAME"  # Cache key unique to the branch or tag
    policy: pull               # Pull the cache before the job starts
    paths:
      - build                  # Use the cached build output directory
      - .gradle                # Use the cached Gradle data directory
